const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const moment = require('moment');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('userinfo')
    .setDescription('¬°Te traigo toda la info de un usuario, con detalles que ni sab√≠as que exist√≠an! üòé')
    .addUserOption(option => 
      option.setName('usuario')
        .setDescription('El usuario del que quer√©s obtener la info üïµÔ∏è‚Äç‚ôÇÔ∏è')
        .setRequired(false)
    ),
  
  async execute(interaction) {
    try {
      await interaction.deferReply();  // Para dar m√°s tiempo de respuesta

      const user = interaction.options.getUser('usuario') || interaction.user; // Si no se menciona un usuario, se toma al que ejecuta el comando
      const member = await interaction.guild.members.fetch(user.id); // Asegurarse de que el miembro est√© en la cach√© antes de buscarlo

      // Obtener detalles del usuario
      const userInfo = {
        username: user.username,
        discriminator: user.discriminator,
        id: user.id,
        avatarUrl: user.displayAvatarURL({ dynamic: true, size: 1024 }),
        joinedAt: member.joinedAt,
        createdAt: user.createdAt,
        status: member.presence ? member.presence.status : 'offline',
        roles: member.roles.cache.map(role => role.name).join(', '),
        nickname: member.nickname || 'No tiene apodo',
        permissions: member.permissions.toArray().join(', '),
        isBot: user.bot,
        isVerified: user.verified || 'No disponible',
        avatarURL: user.displayAvatarURL(),
        email: await getEmail(user), // Correo electr√≥nico (si est√° disponible)
        lastSeenAt: user.lastSeen || 'Desconocido', // √öltima vez que estuvo en l√≠nea
        accountAge: moment(user.createdAt).fromNow(), // Edad de la cuenta
        accountCreationDate: moment(user.createdAt).format('MMMM Do YYYY, h:mm:ss a'),
        activity: await getUserActivity(user), // Actividad reciente
        voiceChannelHistory: await getVoiceChannelHistory(member), // Historial de canales de voz
        messageCount: await getMessageCount(user), // Contar los mensajes enviados
        firstMessage: await getFirstMessage(user), // Primer mensaje
        totalReactions: await getTotalReactions(user), // Total de reacciones en mensajes
        bans: await getBans(user), // Ver si ha sido baneado
        muted: await getMuted(user), // Si est√° o ha estado silenciado
        serverStats: await getServerStats(user), // Participaci√≥n y actividad en el servidor
        twoFA: user.flags.has(1 << 5) ? '‚úÖ Habilitado' : '‚ùå Deshabilitado', // Estado de 2FA
      };

      const embed = new EmbedBuilder()
        .setColor('#007BFF')  // Azul Argentina
        .setTitle(`¬°Toda la info de **${user.username}** est√° ac√°! üòé`)
        .setDescription(`¬°Mir√° los detalles m√°s curiosos de ${user.username}! üîç`)
        .setThumbnail(userInfo.avatarUrl)
        .addFields(
          { name: 'üîë **Nombre de usuario**', value: `${userInfo.username}#${userInfo.discriminator}` },
          { name: 'üÜî **ID de usuario**', value: userInfo.id },
          { name: 'ü§ñ **¬øEs un bot?**', value: userInfo.isBot ? '¬°S√≠, soy un robot! ü§ñ' : '¬°Soy un ser humano! üë§' },
          { name: 'üìß **Correo electr√≥nico**', value: userInfo.email || 'No disponible por privacidad ü§ê' },
          { name: 'üìÖ **Fecha de creaci√≥n de la cuenta**', value: userInfo.accountCreationDate },
          { name: '‚è≥ **Edad de la cuenta**', value: userInfo.accountAge },
          { name: 'üìÖ **Fecha de ingreso al servidor**', value: moment(userInfo.joinedAt).format('MMMM Do YYYY, h:mm:ss a') },
          { name: 'üåê **√öltima actividad**', value: userInfo.status === 'offline' ? 'Est√° desconectado üò¥' : `Actualmente: ${userInfo.status}` },
          { name: 'üí¨ **Apodo**', value: userInfo.nickname || 'No tiene apodo üòî' },
          { name: 'üîë **Roles**', value: userInfo.roles || 'Sin roles por ahora üôÉ' },
          { name: '‚öôÔ∏è **Permisos**', value: userInfo.permissions || 'Sin permisos especiales por ahora' },
          { name: 'üìä **Mensajes enviados**', value: userInfo.messageCount.toString() || 'No se pudo calcular üòÖ' },
          { name: 'üìù **Primer mensaje**', value: userInfo.firstMessage || 'No se encuentra üò¢' },
          { name: 'üëç **Total de reacciones**', value: userInfo.totalReactions.toString() || 'No se registraron reacciones üòï' },
          { name: 'üîá **¬øEst√° silenciado?**', value: userInfo.muted ? 'S√≠, est√° en modo silencioso ü§´' : 'No, puede hablar sin problemas üó£Ô∏è' },
          { name: 'üö´ **¬øHa sido baneado?**', value: userInfo.bans ? 'S√≠, ya no est√° en el servidor üò¨' : 'No, ¬°a√∫n sigue entre nosotros! üôå' },
          { name: 'üìà **Participaci√≥n en el servidor**', value: userInfo.serverStats || 'Es un usuario bastante activo üí¨' },
          { name: 'üîê **Estado de 2FA (Autenticaci√≥n en dos pasos)**', value: userInfo.twoFA },
        )
        .setFooter({ text: `¬°Comando ejecutado por ${interaction.user.username}! üëë` })
        .setTimestamp();

      // S√≥lo responder una vez
      if (!interaction.replied) {
        await interaction.editReply({ embeds: [embed] });
      }
    } catch (error) {
      console.error(error);
      if (!interaction.replied) {
        await interaction.editReply({ content: '¬°Ocurri√≥ un error! Intentalo nuevamente m√°s tarde. üòû' });
      }
    }
  },
};

// Funciones de soporte para obtener la informaci√≥n

async function getEmail(user) {
  // Discord no permite obtener el correo electr√≥nico directamente a trav√©s de la API.
  // Esto solo funcionar√° si el usuario ha vinculado una cuenta a trav√©s de un sistema personalizado.
  // De lo contrario, devolver√° "No disponible"
  return 'No disponible'; // Placeholder, ya que Discord no proporciona esta informaci√≥n.
}

async function getUserActivity(user) {
  // Obtener la actividad reciente del usuario
  const activity = user.presence ? user.presence.activities[0] : null;
  if (activity) {
    return `Jugando a ${activity.name} üéÆ`; // Ejemplo de actividad
  }
  return 'No hay actividad reciente üò¥';
}

async function getVoiceChannelHistory(member) {
  // Ejemplo de historial de canales de voz, si tienes alguna API o sistema de registros para llevarla
  return 'No ha estado en canales de voz recientemente üéß'; // Placeholder
}

async function getMessageCount(user) {
  // Contar los mensajes enviados por el usuario en el servidor
  // Este es un ejemplo y requerir√≠a un sistema para llevar un registro de mensajes
  return 150; // Placeholder
}

async function getFirstMessage(user) {
  // Recuperar el primer mensaje del usuario en el servidor
  // Puedes realizar una b√∫squeda en la base de datos o mediante la API para obtenerlo
  return 'Este es el primer mensaje del usuario. ‚ú®'; // Placeholder
}

async function getTotalReactions(user) {
  // Contar las reacciones del usuario en todos los mensajes
  // Este es un ejemplo, puedes contar las reacciones de una base de datos si es necesario
  return 35; // Placeholder
}

async function getBans(user) {
  // Verificar si el usuario ha sido baneado
  // Puedes consultar un sistema de administraci√≥n o base de datos
  return false; // Placeholder
}

async function getMuted(user) {
  // Verificar si el usuario est√° silenciado
  // Esto depende de c√≥mo manejes los silenciamientos en el servidor
  return false; // Placeholder
}

async function getServerStats(user) {
  // Estad√≠sticas de participaci√≥n en el servidor, como mensajes enviados, canales donde est√° activo
  return 'Muy activo en canales de texto üìö.'; // Placeholder
}
