const { SlashCommandBuilder } = require('@discordjs/builders');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const fs = require('fs');

// Cargar el archivo de tickets si existe
let ticketsData = {};
if (fs.existsSync('./tickets.json')) {
    ticketsData = JSON.parse(fs.readFileSync('./tickets.json', 'utf8'));
}

// Cargar los botones activos si existe
let activeButtons = {};
if (fs.existsSync('./activeButtons.json')) {
    activeButtons = JSON.parse(fs.readFileSync('./activeButtons.json', 'utf8'));
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket')
        .setDescription('Crea un ticket de soporte'),

    async execute(interaction) {
        // Crear los botones para diferentes tipos de ticket
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('duda_ticket')
                .setLabel('Duda')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('bugs_ticket')
                .setLabel('Bugs')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('reporte_ticket')
                .setLabel('Reporte')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('otro_ticket')
                .setLabel('Otro')
                .setStyle(ButtonStyle.Success)
        );

        // Enviar mensaje con los botones para crear un ticket
        await interaction.reply({
            content: 'Haz clic en uno de los botones para crear un tipo de ticket.',
            components: [row],
        });

        // Crear un collector para los botones
        const filter = i => i.user.id === interaction.user.id;
        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000 });

        collector.on('collect', async (i) => {
            const ticketType = i.customId.split('_')[0]; // Obtener tipo de ticket (duda, bugs, reporte, otro)
            
            // Verificar si el usuario ya tiene un ticket abierto
            if (ticketsData[interaction.user.id]) {
                return i.reply({ content: `Ya tienes un ticket abierto en la categor√≠a: ${ticketsData[interaction.user.id].category}. No puedes crear otro ticket.`, ephemeral: true });
            }

            // Generar un ID √∫nico para el ticket
            const ticketId = Object.keys(ticketsData).length + 1; // Incrementamos el ID basado en el tama√±o actual de ticketsData

            // Crear el canal privado para el ticket
            const ticketChannel = await interaction.guild.channels.create({
                name: `ticket-${ticketId}-${interaction.user.username}`, // Nombre del canal con ID y nombre de usuario
                type: 0, // Canal de texto
                parent: '1304528818815635598', // ID de la categor√≠a donde quieres crear los tickets
                permissionOverwrites: [
                    {
                        id: interaction.guild.id, // Denegar acceso a todos los miembros del servidor
                        deny: [PermissionFlagsBits.ViewChannel],
                    },
                    {
                        id: interaction.user.id, // Permitir acceso solo al usuario que crea el ticket
                        allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
                    },
                ],
            });

            // Guardar el ticket en el archivo .json
            ticketsData[interaction.user.id] = {
                id: ticketId,
                category: ticketType,
                openedAt: new Date().toISOString(),
                createdBy: interaction.user.username,
            };
            fs.writeFileSync('./tickets.json', JSON.stringify(ticketsData, null, 2));

            // Guardar el estado del bot√≥n activo en el archivo JSON
            activeButtons[`ticket-${ticketId}`] = {
                channelId: ticketChannel.id,
                buttons: ['duda_ticket', 'bugs_ticket', 'reporte_ticket', 'otro_ticket'],
                userId: interaction.user.id,
                createdAt: new Date().toISOString(),
            };
            fs.writeFileSync('./activeButtons.json', JSON.stringify(activeButtons, null, 2));

            // Crear botones para cerrar y borrar el ticket
            const closeRow = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('üîí Cerrar Ticket')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('delete_ticket')
                    .setLabel('üóëÔ∏è Borrar Ticket')
                    .setStyle(ButtonStyle.Danger)
            );

            // Crear un embed de bienvenida con m√°s detalles
            const embed = new EmbedBuilder()
                .setColor('#0099ff')
                .setTitle('üé´ ¬°Ticket creado con √©xito! üéâ')
                .setDescription(`¬°Hola <@${interaction.user.id}>! Este es tu ticket de tipo **${ticketType}**. ¬øEn qu√© podemos ayudarte?`)
                .addFields(
                    { name: 'üìÖ Fecha de Creaci√≥n', value: `<t:${Math.floor(Date.now() / 1000)}:f>`, inline: true },
                    { name: 'üßë‚Äçüíª Creado por', value: interaction.user.username, inline: true },
                    { name: 'üìÇ Categor√≠a', value: ticketType, inline: true },
                    { name: 'üîë ID del Ticket', value: ticketId.toString(), inline: true }
                )
                .setFooter({ text: 'Recuerda usar los botones para interactuar con el ticket.' });

            // Enviar mensaje en el canal de ticket con el embed y los botones
            await ticketChannel.send({
                embeds: [embed],
                components: [closeRow],
            });

            await i.reply({
                content: `Tu ticket ha sido creado en el canal: ${ticketChannel}`,
                ephemeral: true,
            });

            // Crear un collector para manejar las interacciones dentro del canal del ticket
            const ticketCollector = ticketChannel.createMessageComponentCollector({
                filter: (i) => ['close_ticket', 'delete_ticket'].includes(i.customId) && i.user.id === interaction.user.id,
                time: 600000, // El collector estar√° activo por 10 minutos (600000 ms)
            });

            ticketCollector.on('collect', async (i) => {
                if (i.customId === 'close_ticket') {
                    try {
                        // Cerrar el canal del ticket bloqueando el env√≠o de mensajes
                        await ticketChannel.permissionOverwrites.edit(interaction.guild.id, {
                            SEND_MESSAGES: false, // Bloquea el env√≠o de mensajes
                        });

                        const closeEmbed = new EmbedBuilder()
                            .setColor('#ffcc00')
                            .setTitle('üîí Ticket Cerrado')
                            .setDescription('Este ticket ha sido cerrado. Ya no se puede escribir aqu√≠.')
                            .setFooter({ text: 'Si necesitas m√°s ayuda, abre otro ticket.' });

                        await ticketChannel.send({ embeds: [closeEmbed] });
                        await i.reply({ content: 'El ticket ha sido cerrado y ya no se puede escribir.', ephemeral: true });
                    } catch (error) {
                        console.error('Error al cerrar el ticket:', error);
                        await i.reply({ content: 'Hubo un error al intentar cerrar el ticket.', ephemeral: true });
                    }
                }

                if (i.customId === 'delete_ticket') {
                    try {
                        // Primero responder a la interacci√≥n antes de eliminar el canal
                        await i.reply({ content: 'El ticket ser√° eliminado ahora.', ephemeral: true });

                        const deleteEmbed = new EmbedBuilder()
                            .setColor('#ff0000')
                            .setTitle('üóëÔ∏è Ticket Borrado')
                            .setDescription('Este ticket ha sido completamente eliminado.')
                            .setFooter({ text: 'Gracias por usar nuestro sistema de soporte.' });

                        await ticketChannel.send({ embeds: [deleteEmbed] });

                        // Borrar el canal de ticket
                        await ticketChannel.delete();

                        // Eliminar el ticket del archivo .json
                        delete ticketsData[interaction.user.id];
                        delete activeButtons[`ticket-${ticketId}`];
                        fs.writeFileSync('./tickets.json', JSON.stringify(ticketsData, null, 2));
                        fs.writeFileSync('./activeButtons.json', JSON.stringify(activeButtons, null, 2));

                    } catch (error) {
                        console.error('Error al eliminar el ticket:', error);
                        await i.reply({ content: 'Hubo un error al intentar eliminar el ticket.', ephemeral: true });
                    }
                }
            });

            ticketCollector.on('end', (collected) => {
                if (collected.size === 0) {
                    ticketChannel.send('El tiempo para interactuar con el ticket ha expirado.');
                    ticketChannel.permissionOverwrites.edit(interaction.guild.id, {
                        SEND_MESSAGES: false, // Bloquear el canal autom√°ticamente despu√©s de que expire el tiempo
                    });
                }
            });
        });

        collector.on('end', collected => {
            if (collected.size === 0) {
                interaction.editReply({
                    content: 'El tiempo para crear un ticket ha expirado.',
                    components: [],
                });
            }
        });
    },
};
