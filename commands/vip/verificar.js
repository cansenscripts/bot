const fs = require('fs');
const { SlashCommandBuilder } = require('@discordjs/builders');
const { ActionRowBuilder, ButtonBuilder, EmbedBuilder } = require('discord.js');
const path = require('path');

// Funci√≥n para cargar los c√≥digos desde el archivo JSON
function cargarCodigos() {
    try {
        return JSON.parse(fs.readFileSync('../../codigosVIP.json', 'utf8'));
    } catch (error) {
        return [];
    }
}

// Ruta al nuevo archivo JSON
const staffFilePath = path.join(__dirname, '..', '..', 'miembros_staff.json');

// Funci√≥n para cargar el archivo miembros_staff.json
function cargarStaff() {
    try {
        const data = fs.readFileSync(staffFilePath, 'utf8');
        console.log('Datos cargados desde miembros_staff.json:', data); // Verificar el contenido cargado
        return JSON.parse(data);
    } catch (error) {
        console.error('Error al cargar el archivo miembros_staff.json:', error);
        return []; // Devuelve un array vac√≠o si no se puede leer el archivo
    }
}


module.exports = {
    data: new SlashCommandBuilder()
        .setName('verificarcodigo')
        .setDescription('Verifica un c√≥digo para obtener informaci√≥n')
        .addStringOption(option =>
            option.setName('codigo')
                .setDescription('C√≥digo a verificar')
                .setRequired(true)),

    async execute(interaction) {

        const staff = cargarStaff();
        const usuarioId = interaction.user.id;

        // Buscar al usuario en el archivo staff.json
        const miembro = staff.find(entry => entry.id === usuarioId);

        // Verificar si el usuario es parte del staff
        if (!miembro) {
            return interaction.reply({ content: '‚ùå No tienes permisos para ejecutar este comando. Solo los miembros del Staff pueden hacerlo.', ephemeral: true });
        }

        // Verificar si el usuario tiene el rol adecuado (Buy Manager o CEO)
        const tieneRolAdecuado = miembro.rangos && (miembro.rangos.includes('Buy Manager') || miembro.rangos.includes('CEO'));

        if (!tieneRolAdecuado) {
            return interaction.reply({ content: '‚ùå No tienes el tipo de staff adecuado para ejecutar este comando. Necesitas ser Buy Manager o CEO.', ephemeral: true });
        }

        const codigo = interaction.options.getString('codigo');

        // Cargar los c√≥digos desde el archivo JSON
        const codigos = cargarCodigos();

        // Buscar el c√≥digo en la base de datos
        const codigoData = codigos.find(c => c.codigo === codigo);

        if (!codigoData) {
            return interaction.reply('‚ùå Este c√≥digo no existe o est√° mal escrito.');
        }

        // Verificar si el c√≥digo ya ha sido canjeado
        const estado = codigoData.canjeado ? '‚úÖ Ya ha sido canjeado' : '‚ùå A√∫n disponible';
        
        // Verificar si el c√≥digo ha expirado
        const fechaExpiracion = new Date(codigoData.fechaExpiracion);
        const expirado = fechaExpiracion.getTime() < Date.now() ? 'üî¥ Expirado' : 'üü¢ V√°lido';

        // Crear el embed para mostrar la informaci√≥n
        const embed = new EmbedBuilder()
            .setColor('#FF5733')
            .setTitle('üîç Verificaci√≥n de C√≥digo')
            .setDescription(`Aqu√≠ est√° la informaci√≥n de tu c√≥digo **${codigo}**:`)
            .addFields(
                { name: 'Producto', value: codigoData.producto, inline: true },
                { name: 'Estado', value: estado, inline: true },
                { name: 'Expiraci√≥n', value: fechaExpiracion.toLocaleDateString(), inline: true },
                { name: 'V√°lido hasta', value: expirado, inline: true },
                { name: 'Generado por', value: `<@${codigoData.generadoPor}>`, inline: true }
            )
            .setThumbnail('https://i.imgur.com/1pghgnM.png')  // Thumbnail (puedes poner el logo de tu servidor o algo relacionado)
            .setFooter({ text: '¬°Gracias por usar nuestro sistema de c√≥digos!' });

        // Bot√≥n para m√°s detalles o realizar alguna acci√≥n
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('mas_detalles')  // ID para manejar la interacci√≥n
                .setLabel('Ver m√°s detalles')
                .setStyle('1')  // Estilo del bot√≥n
                .setEmoji('üîç')  // Emoji del bot√≥n
        );

        await interaction.reply({ embeds: [embed], components: [row] });

        // Crear un collector para manejar la interacci√≥n del bot√≥n
        const filter = (i) => i.customId === 'mas_detalles' && i.user.id === interaction.user.id;

        const collector = interaction.channel.createMessageComponentCollector({
            filter,
            time: 15000, // Tiempo de expiraci√≥n (15 segundos)
        });

        collector.on('collect', async (i) => {
            // Mostrar m√°s detalles cuando el bot√≥n sea presionado
            const detallesEmbed = new EmbedBuilder()
                .setColor('#FFD700')
                .setTitle('üîç Detalles del C√≥digo')
                .setDescription(`Detalles adicionales sobre el c√≥digo **${codigo}**:`)
                .addFields(
                    { name: 'C√≥digo', value: codigoData.codigo, inline: true },
                    { name: 'Producto', value: codigoData.producto, inline: true },
                    { name: 'Duraci√≥n', value: `${codigoData.duracion} d√≠a(s)`, inline: true },
                    { name: 'Fecha de Expiraci√≥n', value: new Date(codigoData.fechaExpiracion).toLocaleDateString(), inline: true },
                    { name: 'Generado por', value: `<@${codigoData.generadoPor}>`, inline: true },
                    { name: 'Estado', value: codigoData.canjeado ? 'Canjeado' : 'No canjeado', inline: true }
                )
                .setThumbnail('https://i.imgur.com/lY7z1J0.png') // Imagen de detalles
                .setFooter({ text: '¬°Gracias por usar nuestro sistema de c√≥digos!' });

            await i.reply({ embeds: [detallesEmbed], ephemeral: true }); // Mostrar detalles en un mensaje privado (ephemeral)

            collector.stop(); // Detener el collector despu√©s de la interacci√≥n
        });

        collector.on('end', () => {
            console.log('Collector terminado o expirado.');
        });
    },
};
